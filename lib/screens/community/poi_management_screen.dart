import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../constants/app_colors.dart';
import '../../providers/community_provider.dart';
import '../../models/cycling_poi.dart';
import '../../services/debug_service.dart';

class POIManagementScreen extends ConsumerStatefulWidget {
  const POIManagementScreen({super.key});

  @override
  ConsumerState<POIManagementScreen> createState() => _POIManagementScreenState();
}

class _POIManagementScreenState extends ConsumerState<POIManagementScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _addressController = TextEditingController();
  final _phoneController = TextEditingController();
  final _websiteController = TextEditingController();
  final _debugService = DebugService();
  
  String _selectedType = 'bike_shop';
  double _latitude = 37.7749;
  double _longitude = -122.4194;
  bool _isLoading = false;

  final List<Map<String, String>> _poiTypes = [
    {'value': 'bike_shop', 'label': 'Bike Shop'},
    {'value': 'parking', 'label': 'Bike Parking'},
    {'value': 'repair_station', 'label': 'Repair Station'},
    {'value': 'water_fountain', 'label': 'Water Fountain'},
    {'value': 'rest_area', 'label': 'Rest Area'},
  ];

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    _addressController.dispose();
    _phoneController.dispose();
    _websiteController.dispose();
    super.dispose();
  }

  Future<void> _addPOI() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      final poi = CyclingPOI(
        id: '', // Will be generated by Firestore
        name: _nameController.text.trim(),
        type: _selectedType,
        latitude: _latitude,
        longitude: _longitude,
        description: _descriptionController.text.trim().isEmpty 
            ? null 
            : _descriptionController.text.trim(),
        address: _addressController.text.trim().isEmpty 
            ? null 
            : _addressController.text.trim(),
        phone: _phoneController.text.trim().isEmpty 
            ? null 
            : _phoneController.text.trim(),
        website: _websiteController.text.trim().isEmpty 
            ? null 
            : _websiteController.text.trim(),
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      _debugService.logAction(
        action: 'POI: Creating new POI',
        screen: 'POIManagementScreen',
        parameters: {
          'name': poi.name,
          'type': poi.type,
          'latitude': poi.latitude,
          'longitude': poi.longitude,
        },
      );

      final communityNotifier = ref.read(cyclingPOIsNotifierProvider.notifier);
      await communityNotifier.addPOI(poi);

      _debugService.logAction(
        action: 'POI: Successfully created POI',
        screen: 'POIManagementScreen',
        result: 'POI added to Firebase',
      );

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('POI added successfully!'),
            backgroundColor: AppColors.mossGreen,
          ),
        );
        
        // Clear form
        _formKey.currentState!.reset();
        _nameController.clear();
        _descriptionController.clear();
        _addressController.clear();
        _phoneController.clear();
        _websiteController.clear();
      }
    } catch (e) {
      _debugService.logAction(
        action: 'POI: Failed to create POI',
        screen: 'POIManagementScreen',
        error: e.toString(),
      );
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to add POI: ${e.toString()}'),
            backgroundColor: AppColors.dangerRed,
          ),
        );
      }
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final poisAsync = ref.watch(cyclingPOIsProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('POI Management'),
        backgroundColor: AppColors.urbanBlue,
        foregroundColor: AppColors.surface,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Add POI Form
            Card(
              elevation: 4,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Add New POI',
                        style: Theme.of(context).textTheme.titleLarge?.copyWith(
                          color: AppColors.urbanBlue,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 16),
                      
                      TextFormField(
                        controller: _nameController,
                        decoration: InputDecoration(
                          labelText: 'Name *',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        validator: (value) {
                          if (value == null || value.trim().isEmpty) {
                            return 'Please enter a name';
                          }
                          return null;
                        },
                      ),
                      const SizedBox(height: 16),
                      
                      DropdownButtonFormField<String>(
                        value: _selectedType,
                        decoration: InputDecoration(
                          labelText: 'Type *',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        items: _poiTypes.map((type) {
                          return DropdownMenuItem(
                            value: type['value'],
                            child: Text(type['label']!),
                          );
                        }).toList(),
                        onChanged: (value) {
                          setState(() {
                            _selectedType = value!;
                          });
                        },
                      ),
                      const SizedBox(height: 16),
                      
                      TextFormField(
                        controller: _descriptionController,
                        decoration: InputDecoration(
                          labelText: 'Description',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        maxLines: 2,
                      ),
                      const SizedBox(height: 16),
                      
                      TextFormField(
                        controller: _addressController,
                        decoration: InputDecoration(
                          labelText: 'Address',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                      ),
                      const SizedBox(height: 16),
                      
                      TextFormField(
                        controller: _phoneController,
                        decoration: InputDecoration(
                          labelText: 'Phone',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        keyboardType: TextInputType.phone,
                      ),
                      const SizedBox(height: 16),
                      
                      TextFormField(
                        controller: _websiteController,
                        decoration: InputDecoration(
                          labelText: 'Website',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        keyboardType: TextInputType.url,
                      ),
                      const SizedBox(height: 16),
                      
                      Row(
                        children: [
                          Expanded(
                            child: TextFormField(
                              initialValue: _latitude.toString(),
                              decoration: InputDecoration(
                                labelText: 'Latitude',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                              keyboardType: TextInputType.number,
                              onChanged: (value) {
                                _latitude = double.tryParse(value) ?? _latitude;
                              },
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: TextFormField(
                              initialValue: _longitude.toString(),
                              decoration: InputDecoration(
                                labelText: 'Longitude',
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                              keyboardType: TextInputType.number,
                              onChanged: (value) {
                                _longitude = double.tryParse(value) ?? _longitude;
                              },
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 24),
                      
                        SizedBox(
                          width: double.infinity,
                          child: Semantics(
                            label: 'Add new point of interest to the map',
                            button: true,
                            child: ElevatedButton(
                              onPressed: _isLoading ? null : _addPOI,
                              style: ElevatedButton.styleFrom(
                                backgroundColor: AppColors.urbanBlue,
                                foregroundColor: AppColors.surface,
                                padding: const EdgeInsets.symmetric(vertical: 16),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                              child: _isLoading
                                  ? const CircularProgressIndicator(
                                      valueColor: AlwaysStoppedAnimation<Color>(AppColors.surface),
                                    )
                                  : const Text(
                                      'Add POI',
                                      style: TextStyle(
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                            ),
                          ),
                        ),
                    ],
                  ),
                ),
              ),
            ),
            
            const SizedBox(height: 24),
            
            // Existing POIs List
            Text(
              'Existing POIs',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                color: AppColors.urbanBlue,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            
            poisAsync.when(
              data: (pois) => ListView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                itemCount: pois.length,
                itemBuilder: (context, index) {
                  final poi = pois[index];
                  return Card(
                    margin: const EdgeInsets.only(bottom: 8),
                    child: ListTile(
                      leading: Text(
                        _getPOIIcon(poi.type),
                        style: const TextStyle(fontSize: 24),
                      ),
                      title: Text(poi.name),
                      subtitle: Text('${poi.type} • ${poi.latitude.toStringAsFixed(4)}, ${poi.longitude.toStringAsFixed(4)}'),
                      trailing: Semantics(
                        label: 'Delete point of interest: ${poi.name}',
                        button: true,
                        child: IconButton(
                          icon: const Icon(Icons.delete, color: AppColors.dangerRed),
                          onPressed: () {
                            // TODO: Implement delete functionality
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text('Delete functionality coming soon'),
                              ),
                            );
                          },
                        ),
                      ),
                    ),
                  );
                },
              ),
              loading: () => const Center(
                child: CircularProgressIndicator(),
              ),
              error: (error, stack) => Center(
                child: Text('Error loading POIs: $error'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  String _getPOIIcon(String type) {
    switch (type) {
      case 'bike_shop':
        return '🏪';
      case 'parking':
        return '🚲';
      case 'repair_station':
        return '🔧';
      case 'water_fountain':
        return '💧';
      case 'rest_area':
        return '🪑';
      default:
        return '📍';
    }
  }
}
